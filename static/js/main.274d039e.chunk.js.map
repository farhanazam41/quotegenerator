{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","qoute","setQoute","author","setAuthor","loading","setLoading","fetchQoute","a","arrayofQoutes","axios","get","proxyUrl","data","console","log","quoteText","quoteAuthor","error","useEffect","className","Dimmer","active","inverted","Loader","id","Button","color","onClick","twitterUrl","window","open","Icon","name","secondary","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gUAsGeA,EA/FH,WAAQ,IAAD,EAGOC,mBAAS,IAHhB,mBAGZC,EAHY,KAGLC,EAHK,OAISF,mBAAS,IAJlB,mBAIZG,EAJY,KAIJC,EAJI,OAKWJ,oBAAS,GALpB,mBAKZK,EALY,KAKHC,EALG,KAUbC,EAAU,uCAAG,8BAAAC,EAAA,6DAEfC,EAAgB,GAFD,SAKnBH,GAAW,GAEO,uCACC,0EARA,SASEI,IAAMC,IAAIC,+GATZ,OASXC,EATW,OAUjBC,QAAQC,IAAIF,GAEZJ,EAAgBI,EAAKA,KAZJ,kDAiBjBC,QAAQC,IAAR,MAjBiB,QAqBnB,IACET,GAAW,GACXJ,EAASO,EAAcO,WAEvBZ,EAAUK,EAAcQ,aAExB,MAAMC,GAGNJ,QAAQC,IAAIG,GA9BK,0DAAH,qDAkDd,OAPFC,qBAAU,WAERZ,MAEA,IAIE,qBAAKa,UAAU,kBAAf,SAEEf,EACE,cAACgB,EAAA,EAAD,CAAQC,QAAM,EAACC,UAAQ,EAAvB,SACA,cAACC,EAAA,EAAD,CAAQD,UAAQ,EAAhB,uBAIA,gCACI,sBAAKH,UAAU,aAAf,UACE,mBAAGA,UAAU,sBACb,sBAAMK,GAAG,QAAT,SAAkBxB,OAEpB,qBAAKmB,UAAU,eAAf,SACE,sBAAMK,GAAG,SAAT,SAAmBtB,GAAkB,cAEzC,sBAAKiB,UAAU,mBAAf,UACE,eAACM,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAhCjB,WAEjB,IAAMC,EAAU,gDAA4C5B,EAA5C,cAAuDE,GACvE2B,OAAOC,KAAKF,EAAY,WA6Bd,UACE,cAACG,EAAA,EAAD,CAAMC,KAAK,YADb,iBAGA,cAACP,EAAA,EAAD,CAASQ,WAAS,EAACN,QAASrB,EAA5B,gCC5EG4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.274d039e.chunk.js","sourcesContent":["import { Button, Icon } from 'semantic-ui-react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport React , { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst App = () =>  {\n\n\nconst [qoute, setQoute] = useState('');\nconst [author, setAuthor] = useState('');\nconst [loading, setLoading] = useState(false);\n\n\n\n// for calling quote Api\nconst fetchQoute = async () => {\n\nlet arrayofQoutes = [] ;\n\ntry {\nsetLoading(true);\n  // calling proxy api for avoidning cors issues\n  const proxyUrl ='https://cors-anywhere.herokuapp.com/';\n  const qouteUrl = 'https://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=json';\n  const data = await axios.get(proxyUrl + qouteUrl); \n  console.log(data)\n\n  arrayofQoutes = data.data;\n\n \n} catch(error) {\n\n  console.log(error);\n\n}\n\ntry {\n  setLoading(false)\n  setQoute(arrayofQoutes.quoteText);\n  \n  setAuthor(arrayofQoutes.quoteAuthor);\n\n} catch(error) \n\n{\n  console.log(error);\n}\n  \n};\n\n// for twitter button\nconst tweetQuote = () => {\n\n  const twitterUrl = `https://twitter.com/intent/tweet?text=${qoute} - ${author}`;\n  window.open(twitterUrl, '_blank');\n\n}\n\nuseEffect(() => {\n\n  fetchQoute();\n\n},[])\n   \n\n  return (\n    <div className='quote-container'> \n    {\n      loading ? (\n        <Dimmer active inverted>\n        <Loader inverted >Loading</Loader>\n        </Dimmer>\n      ) :\n      (\n        <div>\n            <div className='quote-text'>\n              <i className='fas fa-quote-left' ></i>\n              <span id=\"quote\">{qoute}</span>\n            </div>\n            <div className='quote-author'>\n              <span id=\"author\">{author ? author : 'Unknown'}</span>\n            </div>\n          <div className='button-container'>\n            <Button color='twitter' onClick={tweetQuote} >\n              <Icon name='twitter' /> Tweet this\n            </Button>\n            <Button  secondary onClick={fetchQoute}>New Qoute</Button>\n          </div>\n        </div>\n      )\n    }\n    \n      \n      \n     \n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}